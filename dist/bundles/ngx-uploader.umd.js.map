{"version":3,"file":"ngx-uploader.umd.js","sources":["~/ngx-uploader/src/ngx-uploader/module/ngx-uploader.module.ts","~/ngx-uploader/src/ngx-uploader/directives/ng-file-drop.directive.ts","~/ngx-uploader/src/ngx-uploader/directives/ng-file-select.directive.ts","~/ngx-uploader/src/ngx-uploader/classes/ngx-uploader.class.ts","~/ngx-uploader/src/ngx-uploader/classes/interfaces.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/root.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { NgFileDropDirective } from '../directives/ng-file-drop.directive';\nimport { NgFileSelectDirective } from '../directives/ng-file-select.directive';\nexport class NgUploaderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ],\n  exports: [\n    NgFileSelectDirective,\n    NgFileDropDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgUploaderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgUploaderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { UploadOutput, UploadInput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs/Subscription';\nexport class NgFileDropDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<UploadInput>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n\n    this.el.addEventListener('drop', this.stopEvent, false);\n    this.el.addEventListener('dragenter', this.stopEvent, false);\n    this.el.addEventListener('dragover', this.stopEvent, false);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sub.forEach(sub => sub.unsubscribe());\n  }\n\n  stopEvent = (e: Event) => {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDrop(e: any) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const /** @type {?} */ event: UploadOutput = { type: 'drop' };\n    this.uploadOutput.emit(event);\n    this.upload.handleFiles(e.dataTransfer.files);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragOver(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOver' };\n    this.uploadOutput.emit(event);\n  }\n/**\n * @param {?} e\n * @return {?}\n */\npublic onDragLeave(e: Event) {\n    if (!e) {\n      return;\n    }\n\n    const /** @type {?} */ event: UploadOutput = { type: 'dragOut' };\n    this.uploadOutput.emit(event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileDrop]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n'onDrop': [{ type: HostListener, args: ['drop', ['$event'], ] },],\n'onDragOver': [{ type: HostListener, args: ['dragover', ['$event'], ] },],\n'onDragLeave': [{ type: HostListener, args: ['dragleave', ['$event'], ] },],\n};\n}\n\nfunction NgFileDropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileDropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileDropDirective.ctorParameters;\n/** @type {?} */\nNgFileDropDirective.propDecorators;\n/** @type {?} */\nNgFileDropDirective.prototype.options;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileDropDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileDropDirective.prototype.upload;\n/** @type {?} */\nNgFileDropDirective.prototype.el;\n/** @type {?} */\nNgFileDropDirective.prototype._sub;\n/** @type {?} */\nNgFileDropDirective.prototype.stopEvent;\n/** @type {?} */\nNgFileDropDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\nimport { UploadOutput, UploaderOptions, NgUploaderService } from '../../../';\nimport { Subscription } from 'rxjs/Subscription';\nexport class NgFileSelectDirective implements OnInit, OnDestroy {\n   options: UploaderOptions;\n   uploadInput: EventEmitter<any>;\n   uploadOutput: EventEmitter<UploadOutput>;\n\n  upload: NgUploaderService;\n  el: HTMLInputElement;\n\n  _sub: Subscription[];\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    this.uploadOutput = new EventEmitter<UploadOutput>();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._sub = [];\n    const /** @type {?} */ concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n    const /** @type {?} */ allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n    this.upload = new NgUploaderService(concurrency, allowedContentTypes);\n\n    this.el = this.elementRef.nativeElement;\n    this.el.addEventListener('change', this.fileListener, false);\n\n    this._sub.push(\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\n        this.uploadOutput.emit(event);\n      })\n    );\n\n    if (this.uploadInput instanceof EventEmitter) {\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.el){\n      this.el.removeEventListener('change', this.fileListener, false);\n      this._sub.forEach(sub => sub.unsubscribe());\n    }\n  }\n\n  fileListener = () => {\n    if (this.el.files) {\n      this.upload.handleFiles(this.el.files);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[ngFileSelect]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input },],\n'uploadInput': [{ type: Input },],\n'uploadOutput': [{ type: Output },],\n};\n}\n\nfunction NgFileSelectDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFileSelectDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFileSelectDirective.ctorParameters;\n/** @type {?} */\nNgFileSelectDirective.propDecorators;\n/** @type {?} */\nNgFileSelectDirective.prototype.options;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadInput;\n/** @type {?} */\nNgFileSelectDirective.prototype.uploadOutput;\n/** @type {?} */\nNgFileSelectDirective.prototype.upload;\n/** @type {?} */\nNgFileSelectDirective.prototype.el;\n/** @type {?} */\nNgFileSelectDirective.prototype._sub;\n/** @type {?} */\nNgFileSelectDirective.prototype.fileListener;\n/** @type {?} */\nNgFileSelectDirective.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {EventEmitter} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {mergeMap} from 'rxjs/operators/mergeMap';\nimport {BlobFile, UploadFile, UploadInput, UploadOutput, UploadStatus} from './interfaces';\n/**\n * @param {?} bytes\n * @return {?}\n */\nexport function humanizeBytes(bytes: number): string {\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n\n    const /** @type {?} */ k = 1024;\n    const /** @type {?} */ sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    const /** @type {?} */ i: number = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nexport class NgUploaderService {\n    queue: UploadFile[];\n    serviceEvents: EventEmitter<UploadOutput>;\n    uploadScheduler: Subject<{ file: UploadFile, event: UploadInput }>;\n    subs: { id: string, sub: Subscription }[];\n    contentTypes: string[];\n    concurrency: number = Number.POSITIVE_INFINITY;\n/**\n * @param {?=} concurrency\n * @param {?=} contentTypes\n */\nconstructor(concurrency: number = Number.POSITIVE_INFINITY, contentTypes: string[] = ['*']) {\n        this.queue = [];\n        this.serviceEvents = new EventEmitter<UploadOutput>();\n        this.subs = [];\n        this.contentTypes = contentTypes;\n        this.concurrency = concurrency;\n        this.initUploadScheduler();\n    }\n/**\n * @return {?}\n */\ninitUploadScheduler() {\n        this.uploadScheduler = new Subject();\n        this.uploadScheduler\n            .pipe(\n                mergeMap(upload => this.startUpload(upload), this.concurrency)\n            )\n            .subscribe(uploadOutput => this.serviceEvents.emit(uploadOutput));\n\n    }\n/**\n * @param {?} incomingFiles\n * @return {?}\n */\nhandleFiles(incomingFiles: FileList): void {\n        const /** @type {?} */ allowedIncomingFiles: File[] = [].reduce.call(incomingFiles, (acc: File[], checkFile: File, i: number) => {\n            if (this.isContentTypeAllowed(checkFile.type)) {\n                acc = acc.concat(checkFile);\n            } else {\n                const /** @type {?} */ rejectedFile: UploadFile = this.makeUploadFile(checkFile, i);\n                this.serviceEvents.emit({type: 'rejected', file: rejectedFile});\n            }\n\n            return acc;\n        }, []);\n\n        this.queue.push(...[].map.call(allowedIncomingFiles, (file: File, i: number) => {\n            const /** @type {?} */ uploadFile: UploadFile = this.makeUploadFile(file, i);\n            this.serviceEvents.emit({type: 'addedToQueue', file: uploadFile});\n            return uploadFile;\n        }));\n\n        this.serviceEvents.emit({type: 'allAddedToQueue'});\n    }\n/**\n * @param {?} input\n * @return {?}\n */\ninitInputEvents(input: EventEmitter<UploadInput>): Subscription {\n        return input.subscribe((event: UploadInput) => {\n            switch (event.type) {\n                case 'uploadFile':\n                    const /** @type {?} */ uploadFileIndex = this.queue.findIndex(file => file === event.file);\n                    if (uploadFileIndex !== -1 && event.file) {\n                        this.uploadScheduler.next({file: this.queue[uploadFileIndex], event: event});\n                    }\n                    break;\n                case 'uploadAll':\n                    const /** @type {?} */ files = this.queue.filter(file => file.progress.status === UploadStatus.Queue);\n                    files.forEach(file => this.uploadScheduler.next({file: file, event: event}));\n                    break;\n                case 'cancel':\n                    const /** @type {?} */ id = event.id || null;\n                    if (!id) {\n                        return;\n                    }\n\n                    const /** @type {?} */ index = this.subs.findIndex(sub => sub.id === id);\n                    if (index !== -1 && this.subs[index].sub) {\n                        this.initUploadScheduler();\n                        this.subs[index].sub.unsubscribe();\n\n                        const /** @type {?} */ fileIndex = this.queue.findIndex(file => file.id === id);\n                        if (fileIndex !== -1) {\n                            this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                            this.serviceEvents.emit({type: 'cancelled', file: this.queue[fileIndex]});\n                        }\n                    }\n                    break;\n                case 'cancelAll':\n                    this.subs.forEach(sub => {\n                        if (sub.sub) {\n                            sub.sub.unsubscribe();\n                        }\n\n                        const /** @type {?} */ file = this.queue.find(uploadFile => uploadFile.id === sub.id);\n                        if (file) {\n                            file.progress.status = UploadStatus.Cancelled;\n                            this.serviceEvents.emit({type: 'cancelled', file: file});\n                        }\n                    });\n                    break;\n                case 'remove':\n                    if (!event.id) {\n                        return;\n                    }\n\n                    const /** @type {?} */ i = this.queue.findIndex(file => file.id === event.id);\n                    if (i !== -1) {\n                        const /** @type {?} */ file = this.queue[i];\n                        this.queue.splice(i, 1);\n                        this.serviceEvents.emit({type: 'removed', file: file});\n                    }\n                    break;\n                case 'removeAll':\n                    if (this.queue.length) {\n                        this.queue = [];\n                        this.serviceEvents.emit({type: 'removedAll'});\n                    }\n                    break;\n            }\n        });\n    }\n/**\n * @param {?} upload\n * @return {?}\n */\nstartUpload(upload: { file: UploadFile, event: UploadInput }): Observable<UploadOutput> {\n        return new Observable(observer => {\n            const /** @type {?} */ sub = this.uploadFile(upload.file, upload.event)\n                .subscribe(output => {\n                    observer.next(output);\n                }, err => {\n                    observer.error(err);\n                    observer.complete();\n                }, () => {\n                    observer.complete();\n                });\n\n            this.subs.push({id: upload.file.id, sub: sub});\n        });\n    }\n/**\n * @param {?} file\n * @param {?} event\n * @return {?}\n */\nuploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\n        return new Observable(observer => {\n            const /** @type {?} */ url = event.url || '';\n            const /** @type {?} */ method = event.method || 'POST';\n            const /** @type {?} */ data = event.data || {};\n            const /** @type {?} */ headers = event.headers || {};\n\n            const /** @type {?} */ xhr = new XMLHttpRequest();\n            const /** @type {?} */ time: number = new Date().getTime();\n            let /** @type {?} */ progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\n            let /** @type {?} */ speed = 0;\n            let /** @type {?} */ eta: number | null = null;\n\n            xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\n                if (e.lengthComputable) {\n                    const /** @type {?} */ percentage = Math.round((e.loaded * 100) / e.total);\n                    const /** @type {?} */ diff = new Date().getTime() - time;\n                    speed = Math.round(e.loaded / diff * 1000);\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n                    eta = Math.ceil((e.total - e.loaded) / speed);\n\n                    file.progress = {\n                        status: UploadStatus.Uploading,\n                        data: {\n                            percentage: percentage,\n                            speed: speed,\n                            speedHuman: `${humanizeBytes(speed)}/s`,\n                            startTime: progressStartTime,\n                            endTime: null,\n                            eta: eta,\n                            etaHuman: this.secondsToHuman(eta)\n                        }\n                    };\n\n                    observer.next({type: 'uploading', file: file});\n                }\n            }, false);\n\n            xhr.upload.addEventListener('error', (e: Event) => {\n                observer.error(e);\n                observer.complete();\n            });\n\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === XMLHttpRequest.DONE) {\n                    const /** @type {?} */ speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n                    file.progress = {\n                        status: UploadStatus.Done,\n                        data: {\n                            percentage: 100,\n                            speed: speedAverage,\n                            speedHuman: `${humanizeBytes(speedAverage)}/s`,\n                            startTime: progressStartTime,\n                            endTime: new Date().getTime(),\n                            eta: eta,\n                            etaHuman: this.secondsToHuman(eta || 0)\n                        }\n                    };\n\n                    file.responseStatus = xhr.status;\n\n                    try {\n                        file.response = JSON.parse(xhr.response);\n                    }\n                    catch ( /** @type {?} */e) {\n                        file.response = xhr.response;\n                    }\n\n                    file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\n\n                    observer.next({type: 'done', file: file});\n\n                    observer.complete();\n                }\n            };\n\n            xhr.open(method, url, true);\n            xhr.withCredentials = event.withCredentials ? true : false;\n\n            try {\n                const /** @type {?} */ uploadFile = /** @type {?} */(( <BlobFile>file.nativeFile));\n                const /** @type {?} */ uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\n\n                if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n                    observer.complete();\n                }\n\n                Object.keys(data).forEach(key => file.form.append(key, data[key]));\n                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n\n                file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\n\n                this.serviceEvents.emit({type: 'start', file: file});\n                xhr.send(file.form);\n            }\n            catch ( /** @type {?} */e) {\n                observer.complete();\n            }\n\n            return () => {\n                xhr.abort();\n            };\n        });\n    }\n/**\n * @param {?} sec\n * @return {?}\n */\nsecondsToHuman(sec: number): string {\n        return new Date(sec * 1000).toISOString().substr(11, 8);\n    }\n/**\n * @return {?}\n */\ngenerateId(): string {\n        return Math.random().toString(36).substring(7);\n    }\n/**\n * @param {?} contentTypes\n * @return {?}\n */\nsetContentTypes(contentTypes: string[]): void {\n        if (typeof contentTypes != 'undefined' && contentTypes instanceof Array) {\n            if (contentTypes.find((type: string) => type === '*') !== undefined) {\n                this.contentTypes = ['*'];\n            } else {\n                this.contentTypes = contentTypes;\n            }\n            return;\n        }\n        this.contentTypes = ['*'];\n    }\n/**\n * @return {?}\n */\nallContentTypesAllowed(): boolean {\n        return this.contentTypes.find((type: string) => type === '*') !== undefined;\n    }\n/**\n * @param {?} mimetype\n * @return {?}\n */\nisContentTypeAllowed(mimetype: string): boolean {\n        if (this.allContentTypesAllowed()) {\n            return true;\n        }\n        return this.contentTypes.find((type: string) => type === mimetype) !== undefined;\n    }\n/**\n * @param {?} file\n * @param {?} index\n * @return {?}\n */\nmakeUploadFile(file: File, index: number): UploadFile {\n        return {\n            fileIndex: index,\n            id: this.generateId(),\n            name: file.name,\n            size: file.size,\n            type: file.type,\n            form: new FormData(),\n            progress: {\n                status: UploadStatus.Queue,\n                data: {\n                    percentage: 0,\n                    speed: 0,\n                    speedHuman: `${humanizeBytes(0)}/s`,\n                    startTime: null,\n                    endTime: null,\n                    eta: null,\n                    etaHuman: null\n                }\n            },\n            lastModifiedDate: file.lastModifiedDate,\n            sub: undefined,\n            nativeFile: file\n        };\n    }\n/**\n * @param {?} httpHeaders\n * @return {?}\n */\nprivate parseResponseHeaders(httpHeaders: ByteString) {\n        if (!httpHeaders) {\n            return;\n        }\n        return httpHeaders.split('\\n')\n            .map(x => x.split(/: */, 2))\n            .filter(x => x[0])\n            .reduce((ac, x) => {\n                ac[x[0]] = x[1];\n                return ac;\n            }, {});\n    }\n}\n\nfunction NgUploaderService_tsickle_Closure_declarations() {\n/** @type {?} */\nNgUploaderService.prototype.queue;\n/** @type {?} */\nNgUploaderService.prototype.serviceEvents;\n/** @type {?} */\nNgUploaderService.prototype.uploadScheduler;\n/** @type {?} */\nNgUploaderService.prototype.subs;\n/** @type {?} */\nNgUploaderService.prototype.contentTypes;\n/** @type {?} */\nNgUploaderService.prototype.concurrency;\n}\n\n","import { Subscription } from 'rxjs/Subscription';\n\nexport interface UploaderOptions {\n  concurrency: number;\n  allowedContentTypes?: string[];\n}\n\nexport interface BlobFile extends Blob {\n  name: string;\n}\nexport type UploadStatus = number;\nexport let UploadStatus: any = {};\nUploadStatus.Queue = 0;\nUploadStatus.Uploading = 1;\nUploadStatus.Done = 2;\nUploadStatus.Cancelled = 3;\nUploadStatus[UploadStatus.Queue] = \"Queue\";\nUploadStatus[UploadStatus.Uploading] = \"Uploading\";\nUploadStatus[UploadStatus.Done] = \"Done\";\nUploadStatus[UploadStatus.Cancelled] = \"Cancelled\";\n\n\nexport interface UploadProgress {\n  status: UploadStatus;\n  data?: {\n    percentage: number;\n    speed: number;\n    speedHuman: string;\n    startTime: number | null;\n    endTime: number | null;\n    eta: number | null;\n    etaHuman: string | null;\n  };\n}\n\nexport interface UploadFile {\n  id: string;\n  fileIndex: number;\n  lastModifiedDate: Date;\n  name: string;\n  size: number;\n  type: string;\n  form: FormData;\n  progress: UploadProgress;\n  response?: any;\n  responseStatus?: number;\n  sub?: Subscription | any;\n  nativeFile?: File;\n  responseHeaders?: { [key: string]: string };\n}\n\nexport interface UploadOutput {\n  type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\n      | 'dragOut' | 'drop' | 'removed' | 'removedAll' | 'rejected';\n  file?: UploadFile;\n  nativeFile?: File;\n}\n\nexport interface UploadInput {\n  type: 'uploadAll' | 'uploadFile' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll';\n  url?: string;\n  method?: string;\n  id?: string;\n  fieldName?: string;\n  fileIndex?: number;\n  file?: UploadFile;\n  data?: { [key: string]: string | Blob };\n  headers?: { [key: string]: string };\n  withCredentials?: boolean;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };"],"names":["NgModule","HostListener","Output","Input","ElementRef","Directive","EventEmitter","Observable","mergeMap","Subject","__extends","observable_1","iterator","iterator_1","root_1","isArrayLike_1","root","observable","Observer_1","rxSubscriber_1","errorObject_1","isArray_1","global"],"mappings":"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"}
